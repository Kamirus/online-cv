#
# Be aware that even a small syntax error here can lead to failures in output.
#

sidebar:
    about: False # set to False or comment line if you want to remove the "how to use?" in the sidebar
    education: False # set to False if you want education in main section instead of in sidebar

    # Profile information
    name: Kamil Listopad
    tagline: # Full Stack Developer
    avatar: profile.png  #place a 100x100 picture inside /assets/images/ folder and provide the name of the file below

    # Sidebar links
    email: listopadkamil@gmail.com
    phone: +48 692 677 415
    website: #do not add http://
    linkedin: listopadkamil
    github: Kamirus
    gitlab:
    bitbucket:
    twitter:
    stack-overflow: # Number/Username, e.g. 123456/alandoe
    codewars:
    goodreads: # Number-Username, e.g. 123456-alandoe

    languages:
      - idiom: Polish
        level: Native

      - idiom: English
        level: Proficient

    interests:
      - item: Functional Programming
        link:

      - item: Programming language theory
        link:

      - item: Sport Climbing
        link:

      - item: Singing
        link:

      - item: cRPGs
        link:

career-profile:
    title: Career Profile
    summary: |
      I am passionate about functional programming and programming language theory.
      I love working with statically typed, purely functional programming languages such as PureScript and Haskell, where I can enforce certain properties in a type system.

      I am always in my element when working on algorithms or CS theory, but I also enjoyed working on REST APIs in Python, so I am very flexible and always passionate about learning new technology.

education:
    - degree: MSc in Computer Science
      university: University of Wrocław
      time: 2019 - (2021)
      details:

    - degree: BSc in Computer Science
      university: University of Wrocław
      time: 2015 - 2019
      details: |
        **Thesis**: *Type-safe database queries via row-generic programming: a monadic EDSL for PureScript*

experiences:

    - role: PureScript Developer
      time: 2018.06 - Present
      company: (part-time) lambdaterms.com, remote
      details: |
        Worked on a couple of projects using mostly **PureScript**.

        I created a [**SQL** library](https://github.com/Kamirus/purescript-selda) for PureScript which allows a user to write type-safe queries guaranteed to be correct by the type system.

        I implemented checkout flow including database design, cookies and
        session management, and integration with tpay all in PureScript.

        I also implemented [FFI bindings](https://github.com/Kamirus/purescript-annoy) for Spotify's library [annoy](https://github.com/spotify/annoy).

    - role: Python Working Student,
      time: 2017.07 - 2018.02
      company: Software Engineer at Nokia, Wrocław.
      details: |
        Worked in a self-organized agile team on the implementation of new features and improvements to current systems. I was responible for designing and implementing REST APIs and backend services. Most of the code written in **Python**.
        Used technologies: **SQLAlchemy**, **Redis**, **Mypy**, **cherrypy**.

projects:
    title: Projects
    intro:
    assignments:
      - title: Selda
        link: "https://github.com/Kamirus/purescript-selda"
        tagline: |
          *tech: PureScript, SQL*

          **SQL library** for **PureScript** which allows a user to write type-safe queries that are guaranteed to be correct by the type system. It supports arbitrarily nested queries with joins, aggregates, etc. Rows from the database are represented using PureScript's records, which is very handy for the user.

          *Implementation details:* monadic interface,
          row-generic programming, existential types and types equality for GADT substitution.
      - title: Ray tracer
        link: "https://github.com/Kamirus/ray-tracer"
        tagline: |
          *tech: OCaml*

          I wrote a program for rendering 3D scenes with geometric figures, mirrors and special light effects, which allow producing images with realistic shadows and depth of field.

          Implementation details: Backward tracing assisted by stochastic methods allows producing interesting effects from simple reflection to a realistic looking depth of field and soft shadows. Modularized code consisting of OCaml modules depend mostly on signatures of others.

      - title: DozenHeroes
        link:
        tagline: |
          *tech: Node.js, Socket.IO, Preact*

          Turn-based card game. Players are able to see a list of online users and can create/join rooms in order to start a game.

          Implementation details:  Synchronization and client-server communication are implemented using WebSockets.

publications:
    title: My favourite University courses
    intro: |
      - Semantics of Programming Languages (and Type Systems)
      - Compiler Construction
      - Functional Programming (mostly OCaml)
      - Algorithms and Data structures
      - Programming (Prolog, Haskell)
    # papers:
    #   - title: The Art of Computer Programming
    #     authors: Donald E. Knuth
    #     conference: Addison-Wesley, 1968

    #   - title: "Genetic Programming III: Darwinian Invention &amp; Problem Solving"
    #     authors: Koza, J.R., Andre, D., Bennett, F.H., Keane, M.A.
    #     conference: "Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 1st edn. (1999)"

    #   - title: A syntax directed compiler for Algol 60
    #     authors: Edgar T. Irons
    #     conference: "Comm. ACM 4 (1961), 51–55"

skills:
    title: Skills &amp; Proficiency

    toolset:
      - name: PureScript
        level: 80%

      - name: Haskell
        level: 70%

      - name: Python
        level: 80%

      - name: OCaml
        level: 60%

      - name: JavaScript
        level: 50%

footer: >
    Designed with <i class="fas fa-heart"></i> by <a href="http://themes.3rdwavemedia.com" target="_blank" rel="nofollow">Xiaoying Riley</a>
